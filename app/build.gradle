apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'let'

android {


    dataBinding {
        enabled = true
    }

    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "com.shivamdev.contactsmanager.runner.DemoTestRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    lintOptions {
        warning 'InvalidPackage'
        textOutput 'stdout'
        fatal 'UnusedResources'
        warning 'ResourceType'
        abortOnError false
        textReport true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

retrolambda {
    jvmArgs '-noverify'
    incremental true
}

dependencies {
    // App Dependencies
    compile "com.android.support:support-v4:${libs.support}"
    compile "com.android.support:appcompat-v7:${libs.support}"
    compile "com.android.support:design:${libs.support}"
    compile "com.android.support:support-annotations:${libs.support}"

    // Networking
    compile "com.google.code.gson:gson:${libs.gson}"
    compile "com.github.bumptech.glide:glide:${libs.glide}"
    compile "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${libs.retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava:${libs.retrofit}"
    compile "com.squareup.okhttp3:okhttp:${libs.okhttp}"
    compile "com.squareup.okhttp3:logging-interceptor:${libs.logginginterceptor}"
    compile "com.google.code.gson:gson:${libs.gson}"

    compile "com.github.bumptech.glide:glide:${libs.glide}"
    compile("com.github.bumptech.glide:okhttp3-integration:${libs.glideOkhttp}") {
        exclude group: 'glide-parent'
    }

    // Rxjava stuff
    compile "io.reactivex:rxjava:${libs.rxJava}"
    compile "io.reactivex:rxandroid:${libs.rxAndroid}"
    compile "com.squareup.sqlbrite:sqlbrite:${libs.sqlbrite}"
    compile "com.squareup.sqlbrite:sqlbrite:${libs.sqlbrite}"
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.7'

    // DI
    annotationProcessor "com.google.dagger:dagger-compiler:${libs.dagger}"
    compile "com.google.dagger:dagger:${libs.dagger}"
    provided "javax.annotation:jsr250-api:${libs.javax_annotation}"
    compile "com.jakewharton:butterknife:${libs.butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libs.butterknife}"

    // Misc
    compile "org.parceler:parceler-api:${libs.parceler}"
    annotationProcessor "org.parceler:parceler:${libs.parceler}"
    compile "com.jakewharton.timber:timber:${libs.timber}"
    compile 'com.jakewharton.timber:timber:4.1.0'
    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
    compile "org.greenrobot:eventbus:${libs.eventbus}"
    debugCompile "com.facebook.stetho:stetho-okhttp3:${libs.stetho}"

    // Instrumentation test dependencies
    androidTestCompile "junit:junit:${testing.junit}"
    androidTestCompile "org.mockito:mockito-core:${testing.mockito}"
    androidTestCompile "com.android.support:support-annotations:${libs.support}"
    androidTestCompile "com.android.support.test.espresso:espresso-core:${testing.espresso}"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${testing.espresso}"
    androidTestCompile "com.android.support:support-annotations:${libs.support}"
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:${testing.espresso}") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestCompile "com.android.support.test:runner:${testing.runner}"
    androidTestCompile "com.android.support.test:rules:${testing.runner}"
    androidTestCompile "com.crittercism.dexmaker:dexmaker:${testing.dexmaker}"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:${testing.dexmaker}"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:${testing.dexmaker}"
    androidTestCompile("com.jakewharton.espresso:okhttp3-idling-resource:${testing.okhttpidlingresource}") {
        exclude group: 'com.android.support'
    }

    androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:${testing.uiautomator}"
    androidTestCompile "com.squareup.okhttp3:mockwebserver:${testing.mockwebserver}"
    androidTestCompile "com.github.andrzejchm.RESTMock:android:${testing.restmock}"

    // Unit tests dependencies
    testCompile "junit:junit:${testing.junit}"
    testCompile "org.mockito:mockito-core:${testing.mockito}"
    testCompile "org.hamcrest:hamcrest-core:${testing.hamcrest}"
    testCompile "org.hamcrest:hamcrest-library:${testing.hamcrest}"
    testCompile "org.hamcrest:hamcrest-integration:${testing.hamcrest}"
    testCompile "org.robolectric:robolectric:${testing.roboelectric}"

    testAnnotationProcessor "com.google.dagger:dagger-compiler:${testing.dagger}"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:${testing.dagger}"
}

// Log out test results to console
tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}
